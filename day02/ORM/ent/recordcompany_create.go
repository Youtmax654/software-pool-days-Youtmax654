// Code generated by ent, DO NOT EDIT.

package ent

import (
	"SoftwareGoDay2/ent/artist"
	"SoftwareGoDay2/ent/recordcompany"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// RecordCompanyCreate is the builder for creating a RecordCompany entity.
type RecordCompanyCreate struct {
	config
	mutation *RecordCompanyMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (rcc *RecordCompanyCreate) SetName(s string) *RecordCompanyCreate {
	rcc.mutation.SetName(s)
	return rcc
}

// SetID sets the "id" field.
func (rcc *RecordCompanyCreate) SetID(u uuid.UUID) *RecordCompanyCreate {
	rcc.mutation.SetID(u)
	return rcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rcc *RecordCompanyCreate) SetNillableID(u *uuid.UUID) *RecordCompanyCreate {
	if u != nil {
		rcc.SetID(*u)
	}
	return rcc
}

// AddArtistIDs adds the "artists" edge to the Artist entity by IDs.
func (rcc *RecordCompanyCreate) AddArtistIDs(ids ...uuid.UUID) *RecordCompanyCreate {
	rcc.mutation.AddArtistIDs(ids...)
	return rcc
}

// AddArtists adds the "artists" edges to the Artist entity.
func (rcc *RecordCompanyCreate) AddArtists(a ...*Artist) *RecordCompanyCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return rcc.AddArtistIDs(ids...)
}

// Mutation returns the RecordCompanyMutation object of the builder.
func (rcc *RecordCompanyCreate) Mutation() *RecordCompanyMutation {
	return rcc.mutation
}

// Save creates the RecordCompany in the database.
func (rcc *RecordCompanyCreate) Save(ctx context.Context) (*RecordCompany, error) {
	rcc.defaults()
	return withHooks(ctx, rcc.sqlSave, rcc.mutation, rcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rcc *RecordCompanyCreate) SaveX(ctx context.Context) *RecordCompany {
	v, err := rcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcc *RecordCompanyCreate) Exec(ctx context.Context) error {
	_, err := rcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcc *RecordCompanyCreate) ExecX(ctx context.Context) {
	if err := rcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rcc *RecordCompanyCreate) defaults() {
	if _, ok := rcc.mutation.ID(); !ok {
		v := recordcompany.DefaultID()
		rcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rcc *RecordCompanyCreate) check() error {
	if _, ok := rcc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "RecordCompany.name"`)}
	}
	return nil
}

func (rcc *RecordCompanyCreate) sqlSave(ctx context.Context) (*RecordCompany, error) {
	if err := rcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rcc.mutation.id = &_node.ID
	rcc.mutation.done = true
	return _node, nil
}

func (rcc *RecordCompanyCreate) createSpec() (*RecordCompany, *sqlgraph.CreateSpec) {
	var (
		_node = &RecordCompany{config: rcc.config}
		_spec = sqlgraph.NewCreateSpec(recordcompany.Table, sqlgraph.NewFieldSpec(recordcompany.FieldID, field.TypeUUID))
	)
	if id, ok := rcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rcc.mutation.Name(); ok {
		_spec.SetField(recordcompany.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := rcc.mutation.ArtistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recordcompany.ArtistsTable,
			Columns: []string{recordcompany.ArtistsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artist.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RecordCompanyCreateBulk is the builder for creating many RecordCompany entities in bulk.
type RecordCompanyCreateBulk struct {
	config
	err      error
	builders []*RecordCompanyCreate
}

// Save creates the RecordCompany entities in the database.
func (rccb *RecordCompanyCreateBulk) Save(ctx context.Context) ([]*RecordCompany, error) {
	if rccb.err != nil {
		return nil, rccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rccb.builders))
	nodes := make([]*RecordCompany, len(rccb.builders))
	mutators := make([]Mutator, len(rccb.builders))
	for i := range rccb.builders {
		func(i int, root context.Context) {
			builder := rccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RecordCompanyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rccb *RecordCompanyCreateBulk) SaveX(ctx context.Context) []*RecordCompany {
	v, err := rccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rccb *RecordCompanyCreateBulk) Exec(ctx context.Context) error {
	_, err := rccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rccb *RecordCompanyCreateBulk) ExecX(ctx context.Context) {
	if err := rccb.Exec(ctx); err != nil {
		panic(err)
	}
}
