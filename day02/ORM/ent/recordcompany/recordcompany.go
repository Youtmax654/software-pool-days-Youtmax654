// Code generated by ent, DO NOT EDIT.

package recordcompany

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the recordcompany type in the database.
	Label = "record_company"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeArtists holds the string denoting the artists edge name in mutations.
	EdgeArtists = "artists"
	// Table holds the table name of the recordcompany in the database.
	Table = "record_companies"
	// ArtistsTable is the table that holds the artists relation/edge.
	ArtistsTable = "artists"
	// ArtistsInverseTable is the table name for the Artist entity.
	// It exists in this package in order to avoid circular dependency with the "artist" package.
	ArtistsInverseTable = "artists"
	// ArtistsColumn is the table column denoting the artists relation/edge.
	ArtistsColumn = "record_company_artists"
)

// Columns holds all SQL columns for recordcompany fields.
var Columns = []string{
	FieldID,
	FieldName,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the RecordCompany queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByArtistsCount orders the results by artists count.
func ByArtistsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newArtistsStep(), opts...)
	}
}

// ByArtists orders the results by artists terms.
func ByArtists(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newArtistsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newArtistsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ArtistsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ArtistsTable, ArtistsColumn),
	)
}
