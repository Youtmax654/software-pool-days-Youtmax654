// Code generated by ent, DO NOT EDIT.

package ent

import (
	"SoftwareGoDay2/ent/artist"
	"SoftwareGoDay2/ent/predicate"
	"SoftwareGoDay2/ent/recordcompany"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// RecordCompanyUpdate is the builder for updating RecordCompany entities.
type RecordCompanyUpdate struct {
	config
	hooks    []Hook
	mutation *RecordCompanyMutation
}

// Where appends a list predicates to the RecordCompanyUpdate builder.
func (rcu *RecordCompanyUpdate) Where(ps ...predicate.RecordCompany) *RecordCompanyUpdate {
	rcu.mutation.Where(ps...)
	return rcu
}

// SetName sets the "name" field.
func (rcu *RecordCompanyUpdate) SetName(s string) *RecordCompanyUpdate {
	rcu.mutation.SetName(s)
	return rcu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rcu *RecordCompanyUpdate) SetNillableName(s *string) *RecordCompanyUpdate {
	if s != nil {
		rcu.SetName(*s)
	}
	return rcu
}

// AddArtistIDs adds the "artists" edge to the Artist entity by IDs.
func (rcu *RecordCompanyUpdate) AddArtistIDs(ids ...uuid.UUID) *RecordCompanyUpdate {
	rcu.mutation.AddArtistIDs(ids...)
	return rcu
}

// AddArtists adds the "artists" edges to the Artist entity.
func (rcu *RecordCompanyUpdate) AddArtists(a ...*Artist) *RecordCompanyUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return rcu.AddArtistIDs(ids...)
}

// Mutation returns the RecordCompanyMutation object of the builder.
func (rcu *RecordCompanyUpdate) Mutation() *RecordCompanyMutation {
	return rcu.mutation
}

// ClearArtists clears all "artists" edges to the Artist entity.
func (rcu *RecordCompanyUpdate) ClearArtists() *RecordCompanyUpdate {
	rcu.mutation.ClearArtists()
	return rcu
}

// RemoveArtistIDs removes the "artists" edge to Artist entities by IDs.
func (rcu *RecordCompanyUpdate) RemoveArtistIDs(ids ...uuid.UUID) *RecordCompanyUpdate {
	rcu.mutation.RemoveArtistIDs(ids...)
	return rcu
}

// RemoveArtists removes "artists" edges to Artist entities.
func (rcu *RecordCompanyUpdate) RemoveArtists(a ...*Artist) *RecordCompanyUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return rcu.RemoveArtistIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rcu *RecordCompanyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rcu.sqlSave, rcu.mutation, rcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rcu *RecordCompanyUpdate) SaveX(ctx context.Context) int {
	affected, err := rcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rcu *RecordCompanyUpdate) Exec(ctx context.Context) error {
	_, err := rcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcu *RecordCompanyUpdate) ExecX(ctx context.Context) {
	if err := rcu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rcu *RecordCompanyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(recordcompany.Table, recordcompany.Columns, sqlgraph.NewFieldSpec(recordcompany.FieldID, field.TypeUUID))
	if ps := rcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcu.mutation.Name(); ok {
		_spec.SetField(recordcompany.FieldName, field.TypeString, value)
	}
	if rcu.mutation.ArtistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recordcompany.ArtistsTable,
			Columns: []string{recordcompany.ArtistsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artist.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.RemovedArtistsIDs(); len(nodes) > 0 && !rcu.mutation.ArtistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recordcompany.ArtistsTable,
			Columns: []string{recordcompany.ArtistsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artist.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.ArtistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recordcompany.ArtistsTable,
			Columns: []string{recordcompany.ArtistsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artist.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recordcompany.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rcu.mutation.done = true
	return n, nil
}

// RecordCompanyUpdateOne is the builder for updating a single RecordCompany entity.
type RecordCompanyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RecordCompanyMutation
}

// SetName sets the "name" field.
func (rcuo *RecordCompanyUpdateOne) SetName(s string) *RecordCompanyUpdateOne {
	rcuo.mutation.SetName(s)
	return rcuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rcuo *RecordCompanyUpdateOne) SetNillableName(s *string) *RecordCompanyUpdateOne {
	if s != nil {
		rcuo.SetName(*s)
	}
	return rcuo
}

// AddArtistIDs adds the "artists" edge to the Artist entity by IDs.
func (rcuo *RecordCompanyUpdateOne) AddArtistIDs(ids ...uuid.UUID) *RecordCompanyUpdateOne {
	rcuo.mutation.AddArtistIDs(ids...)
	return rcuo
}

// AddArtists adds the "artists" edges to the Artist entity.
func (rcuo *RecordCompanyUpdateOne) AddArtists(a ...*Artist) *RecordCompanyUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return rcuo.AddArtistIDs(ids...)
}

// Mutation returns the RecordCompanyMutation object of the builder.
func (rcuo *RecordCompanyUpdateOne) Mutation() *RecordCompanyMutation {
	return rcuo.mutation
}

// ClearArtists clears all "artists" edges to the Artist entity.
func (rcuo *RecordCompanyUpdateOne) ClearArtists() *RecordCompanyUpdateOne {
	rcuo.mutation.ClearArtists()
	return rcuo
}

// RemoveArtistIDs removes the "artists" edge to Artist entities by IDs.
func (rcuo *RecordCompanyUpdateOne) RemoveArtistIDs(ids ...uuid.UUID) *RecordCompanyUpdateOne {
	rcuo.mutation.RemoveArtistIDs(ids...)
	return rcuo
}

// RemoveArtists removes "artists" edges to Artist entities.
func (rcuo *RecordCompanyUpdateOne) RemoveArtists(a ...*Artist) *RecordCompanyUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return rcuo.RemoveArtistIDs(ids...)
}

// Where appends a list predicates to the RecordCompanyUpdate builder.
func (rcuo *RecordCompanyUpdateOne) Where(ps ...predicate.RecordCompany) *RecordCompanyUpdateOne {
	rcuo.mutation.Where(ps...)
	return rcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rcuo *RecordCompanyUpdateOne) Select(field string, fields ...string) *RecordCompanyUpdateOne {
	rcuo.fields = append([]string{field}, fields...)
	return rcuo
}

// Save executes the query and returns the updated RecordCompany entity.
func (rcuo *RecordCompanyUpdateOne) Save(ctx context.Context) (*RecordCompany, error) {
	return withHooks(ctx, rcuo.sqlSave, rcuo.mutation, rcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rcuo *RecordCompanyUpdateOne) SaveX(ctx context.Context) *RecordCompany {
	node, err := rcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rcuo *RecordCompanyUpdateOne) Exec(ctx context.Context) error {
	_, err := rcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcuo *RecordCompanyUpdateOne) ExecX(ctx context.Context) {
	if err := rcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rcuo *RecordCompanyUpdateOne) sqlSave(ctx context.Context) (_node *RecordCompany, err error) {
	_spec := sqlgraph.NewUpdateSpec(recordcompany.Table, recordcompany.Columns, sqlgraph.NewFieldSpec(recordcompany.FieldID, field.TypeUUID))
	id, ok := rcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RecordCompany.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, recordcompany.FieldID)
		for _, f := range fields {
			if !recordcompany.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != recordcompany.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcuo.mutation.Name(); ok {
		_spec.SetField(recordcompany.FieldName, field.TypeString, value)
	}
	if rcuo.mutation.ArtistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recordcompany.ArtistsTable,
			Columns: []string{recordcompany.ArtistsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artist.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.RemovedArtistsIDs(); len(nodes) > 0 && !rcuo.mutation.ArtistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recordcompany.ArtistsTable,
			Columns: []string{recordcompany.ArtistsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artist.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.ArtistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recordcompany.ArtistsTable,
			Columns: []string{recordcompany.ArtistsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artist.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RecordCompany{config: rcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recordcompany.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rcuo.mutation.done = true
	return _node, nil
}
