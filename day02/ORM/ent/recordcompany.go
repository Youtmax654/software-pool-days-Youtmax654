// Code generated by ent, DO NOT EDIT.

package ent

import (
	"SoftwareGoDay2/ent/recordcompany"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// RecordCompany is the model entity for the RecordCompany schema.
type RecordCompany struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RecordCompanyQuery when eager-loading is set.
	Edges        RecordCompanyEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RecordCompanyEdges holds the relations/edges for other nodes in the graph.
type RecordCompanyEdges struct {
	// Artists holds the value of the artists edge.
	Artists []*Artist `json:"artists,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ArtistsOrErr returns the Artists value or an error if the edge
// was not loaded in eager-loading.
func (e RecordCompanyEdges) ArtistsOrErr() ([]*Artist, error) {
	if e.loadedTypes[0] {
		return e.Artists, nil
	}
	return nil, &NotLoadedError{edge: "artists"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RecordCompany) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case recordcompany.FieldName:
			values[i] = new(sql.NullString)
		case recordcompany.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RecordCompany fields.
func (rc *RecordCompany) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case recordcompany.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				rc.ID = *value
			}
		case recordcompany.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				rc.Name = value.String
			}
		default:
			rc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RecordCompany.
// This includes values selected through modifiers, order, etc.
func (rc *RecordCompany) Value(name string) (ent.Value, error) {
	return rc.selectValues.Get(name)
}

// QueryArtists queries the "artists" edge of the RecordCompany entity.
func (rc *RecordCompany) QueryArtists() *ArtistQuery {
	return NewRecordCompanyClient(rc.config).QueryArtists(rc)
}

// Update returns a builder for updating this RecordCompany.
// Note that you need to call RecordCompany.Unwrap() before calling this method if this RecordCompany
// was returned from a transaction, and the transaction was committed or rolled back.
func (rc *RecordCompany) Update() *RecordCompanyUpdateOne {
	return NewRecordCompanyClient(rc.config).UpdateOne(rc)
}

// Unwrap unwraps the RecordCompany entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rc *RecordCompany) Unwrap() *RecordCompany {
	_tx, ok := rc.config.driver.(*txDriver)
	if !ok {
		panic("ent: RecordCompany is not a transactional entity")
	}
	rc.config.driver = _tx.drv
	return rc
}

// String implements the fmt.Stringer.
func (rc *RecordCompany) String() string {
	var builder strings.Builder
	builder.WriteString("RecordCompany(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rc.ID))
	builder.WriteString("name=")
	builder.WriteString(rc.Name)
	builder.WriteByte(')')
	return builder.String()
}

// RecordCompanies is a parsable slice of RecordCompany.
type RecordCompanies []*RecordCompany
